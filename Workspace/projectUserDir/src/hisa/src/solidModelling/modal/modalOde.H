/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2016 Ridhwaan Suliman - CSIR, South Africa
    Copyright (C) 2014-2016 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2016 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "argList.H"
#include "IOmanip.H"
#include "ODESystem.H"
#include "ODESolver.H"
#ifdef BLUECFD
#include "Time.T.H"
#else
#include "Time.H"
#endif

using namespace Foam;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

class modalOde
:
    public ODESystem
{

private:
    label nModes_;
    Switch steadyState_; //In this case the class is not used to solve ODEs but just to invert the steady-state modal equations
    const scalarField* massMatrixPtr_; // Stored row-major
    const scalarField* dampingMatrixPtr_; // Stored row-major
    const scalarField* stiffnessMatrixPtr_; // Stored row-major
    const scalarField* constGenForcesPtr_;
    const scalarField* linCoeffGenForcesPtr_;
    const scalarField* constGenForces0Ptr_;
    const scalarField* linCoeffGenForces0Ptr_;
    const Time* timePtr_;

public:

    modalOde()
    :
        nModes_(0),
        massMatrixPtr_(NULL),
        dampingMatrixPtr_(NULL),
        stiffnessMatrixPtr_(NULL),
        constGenForcesPtr_(NULL),
        linCoeffGenForcesPtr_(NULL),
        constGenForces0Ptr_(NULL),
        linCoeffGenForces0Ptr_(NULL),
        timePtr_(NULL)
    {}

    label nEqns() const
    {
        return nModes_*2;
    }

    void initialise(const label nModes, const Switch steadyState, const scalarField* massMatrixPtr, const scalarField* dampingMatrixPtr,
                    const scalarField* stiffnessMatrixPtr, const scalarField* constGenForcesPtr, const scalarField* linCoeffGenForcesPtr,
                    const scalarField* constGenForces0Ptr, const scalarField* linCoeffGenForces0Ptr, const Time* timePtr)
    {
        nModes_ = nModes;
        steadyState_ = steadyState;
        massMatrixPtr_ = massMatrixPtr;
        dampingMatrixPtr_ = dampingMatrixPtr;
        stiffnessMatrixPtr_ = stiffnessMatrixPtr;
        constGenForcesPtr_ = constGenForcesPtr;
        linCoeffGenForcesPtr_ = linCoeffGenForcesPtr;
        constGenForces0Ptr_ = constGenForces0Ptr;
        linCoeffGenForces0Ptr_ = linCoeffGenForces0Ptr;
        timePtr_ = timePtr;
    }

    void derivatives
    (
        const scalar x,
        const scalarField& y,
#if FOUNDATION >= 8
        const label li,
#endif
        scalarField& dydx
    ) const
    {
        // In steady-state case, returns the solved values in place of the derivatives

        if (!nModes_)
        {
            FatalErrorInFunction
                << "Not initialised." << abort(FatalError);
        }

        // Determine where we are in the timestep for force interpolation
        scalar h = (timePtr_->timeOutputValue()-x)/timePtr_->deltaTValue();

        // Assemble everything on RHS
        const scalarField& D = *dampingMatrixPtr_;
        const scalarField& K = *stiffnessMatrixPtr_;
        for (label i = 0; i < nModes_; i++)
        {
            dydx[i] = h*(*constGenForcesPtr_)[i] + (1-h)*(*constGenForces0Ptr_)[i];
            for (label j = 0; j < nModes_; j++)
            {
                const label k = (j >= i ? (2*nModes_ - i + 1)*i/2 + j - i : (2*nModes_ - j + 1)*j/2 + i - j);
                dydx[i] += h*(*linCoeffGenForcesPtr_)[k]*y[nModes_+j] + (1-h)*(*linCoeffGenForces0Ptr_)[k]*y[nModes_+j];
                if (!steadyState_)
                {
                    dydx[i] -= K[i*nModes_+j]*y[nModes_+j];
                    dydx[i] -= D[i*nModes_+j]*y[j];
                }
            }
        }

        scalarSquareMatrix A(nModes_);
        for (label i = 0; i < nModes_; i++)
        {
            for (label j = 0; j < nModes_; j++)
            {
                A[i][j] =
                (
                    steadyState_ ?
                    (*stiffnessMatrixPtr_)[i*nModes_+j] :
                    (*massMatrixPtr_)[i*nModes_+j]
                );
            }
        }
        solve(A, dydx);

        for (label i = 0; i < nModes_; i++)
        {
            if(steadyState_)
            {
                dydx[nModes_+i] = dydx[i];
                dydx[i] = 0.0;
            }
            else
            {
                dydx[nModes_+i] = y[i];
            }
        }

    }

    void jacobian
    (
        const scalar x,
        const scalarField& y,
#if FOUNDATION >= 8
        const label li,
#endif
        scalarField& dfdx,
        scalarSquareMatrix& dfdy
    ) const
    {
        FatalErrorInFunction << "Jacobian not implemented." << abort(FatalError);
    }
};

// ************************************************************************* //
