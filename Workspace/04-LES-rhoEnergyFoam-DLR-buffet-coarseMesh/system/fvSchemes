/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
fluxScheme    Kurganov;

ddtSchemes
{
    default          Euler;
}

gradSchemes
{
    default         Gauss linear;
    grad(nuTilda)    cellLimited Gauss linear 0.9;
    grad(k)          cellLimited Gauss linear 0.9;
    grad(omega)      cellLimited Gauss linear 0.9;
}

divSchemes
{
    default          Gauss linear;
    div(tauMC)       Gauss linear;
    div(phi,nuTilda) bounded Gauss upwind phi;
    div(phi,k)       bounded Gauss upwind phi;
    div(phi,omega)   bounded Gauss upwind phi;
    div(phi,Ret)    bounded Gauss linear;
    div(phi,im) bounded Gauss linear;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default                     Gauss linear corrected;
    laplacian(muEff,U)          Gauss linear compact;
    laplacian(alphaEff,e)       Gauss linear compact;
    laplacian((1|A(U)),p) Gauss linear corrected;
    laplacian(DkEff,k) Gauss linear corrected;
    laplacian(DomegaEff,omega) Gauss linear corrected;
    laplacian(DRetEff,Ret) Gauss linear corrected;
    laplacian(DimEff,im) Gauss linear corrected;
    laplacian(DREff,R) Gauss linear corrected;
    laplacian(DnuTildaEff,nuTilda) Gauss linear corrected;
}

interpolationSchemes
{
//    default          linear;
//    reconstruct(rho) wVanLeer;
//    reconstruct(U)   wVanLeer;
//    reconstruct(T)   wVanLeer;

    default          midPoint;
    reconstruct(p)   Minmod;
    reconstruct(M)   Minmod;
    reconstruct(T)   Minmod;
    reconstruct(rho) Minmod;
    reconstruct(U)   Minmod;
}

snGradSchemes
{
    default         corrected;
}


wallDist
{
    method meshWave;
}

// ************************************************************************* //
