/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014 Johan Heyns - CSIR, South Africa
    Copyright (C) 2020 Oliver Oxtoby
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::boundaryCorrectedNutLowReWallFunctionFvPatchScalarField

Group
    grpGenericBoundaryConditions

Description
    Fixed zero value boundary condition which calculates snGrad at
    boundary assuming boundary face values not at the centroid but
    adjacent to internal cell centroid.

SourceFiles
    boundaryCorrectedNutLowReWallFunctionFvPatchScalarField.C

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef boundaryCorrectedNutLowReWallFunctionFvPatchScalarField_H
#define boundaryCorrectedNutLowReWallFunctionFvPatchScalarField_H

#include "nutLowReWallFunctionFvPatchScalarField.H"
#include "fvsPatchFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
    Class boundaryCorrectedNutLowReWallFunctionFvPatchScalarField Declaration
\*---------------------------------------------------------------------------*/

class boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
:
    public nutLowReWallFunctionFvPatchScalarField
{

public:

    //- Runtime type information
    TypeName("boundaryCorrectedNutLowReWallFunction");


    // Constructors

        //- Construct from patch and internal field
        boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping the given 
        //  boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
        //  onto a new patch
        boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
        (
            const boundaryCorrectedNutLowReWallFunctionFvPatchScalarField&,
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const fvPatchFieldMapper&
        );

#if FOUNDATION >= 9
#else
        //- Construct and return a clone
        virtual tmp<fvPatchScalarField> clone() const
        {
            return tmp<fvPatchScalarField>
            (
                new boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
                (
                    *this, this->internalField()
                )
            );
        }
#endif

        //- Construct as copy setting internal field reference
        boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
        (
            const boundaryCorrectedNutLowReWallFunctionFvPatchScalarField&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchScalarField> clone
        (
            const DimensionedField<scalar, volMesh>& iF
        ) const
        {
            return tmp<fvPatchScalarField>
            (
                new boundaryCorrectedNutLowReWallFunctionFvPatchScalarField
                (
                    *this, iF
                )
            );
        }


    // Member functions

        // Evaluation functions

            //- Return gradient at boundary
            virtual tmp<scalarField> snGrad() const;

            //- Return the matrix diagonal coefficients corresponding to the
            //  evaluation of the gradient of this patchField
            virtual tmp<scalarField> gradientInternalCoeffs() const;

            //- Return the matrix source coefficients corresponding to the
            //  evaluation of the gradient of this patchField
            virtual tmp<scalarField> gradientBoundaryCoeffs() const;
};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
