/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    jacobianMatrix

Description
    Holds the different components of a Jacobian marix in one place.

Authors
    Johan Heyns
    Oliver Oxtoby
    Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef jacobianMatrix_H
#define jacobianMatrix_H

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "fvCFD.H"
#include "fvjMatrix.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#define forN(N,i) for(Foam::label i=0; i < (N); i++)

namespace Foam
{

/*---------------------------------------------------------------------------*\
                   Class jacobianMatrix Declaration
\*---------------------------------------------------------------------------*/

template <int nScalar, int nVector>
class jacobianMatrix
{

    protected:

        // Components of Jacobian
        PtrList<fvjMatrix<scalar>> dSByS_;
        PtrList<fvjMatrix<vector>> dSByV_;
        PtrList<fvjMatrix<vector>> dVByS_;
        PtrList<fvjMatrix<tensor>> dVByV_;

        const fvMesh& mesh_;

    public:
        //- Runtime type information
        TypeName("jacobianMatrix");

        jacobianMatrix(const fvMesh& mesh);

        virtual ~jacobianMatrix()
        {}

        bool dSBySExists(const label i, const label j) const
        {
            const label idx = i*nScalar+j;
            return dSByS_.set(idx);
        }

        bool dSByVExists(const label i, const label j) const
        {
            const label idx = i*nVector+j;
            return dSByV_.set(idx);
        }

        bool dVBySExists(const label i, const label j) const
        {
            const label idx = i*nScalar+j;
            return dVByS_.set(idx);
        }

        bool dVByVExists(const label i, const label j) const
        {
            const label idx = i*nVector+j;
            return dVByV_.set(idx);
        }

        const fvjMatrix<scalar>& dSByS(const label i, const label j) const
        {
            const label idx = i*nScalar+j;
            if (!dSByS_.set(idx))
            {
                FatalErrorInFunction
                    << "Jacobian not defined." << exit(FatalError);
            }
            return dSByS_[idx];
        }

        const fvjMatrix<vector>& dSByV(const label i, const label j) const
        {
            const label idx = i*nVector+j;
            if (!dSByV_.set(idx))
            {
                FatalErrorInFunction
                    << "Jacobian not defined." << exit(FatalError);
            }
            return dSByV_[idx];
        }

        const fvjMatrix<vector>& dVByS(const label i, const label j) const
        {
            const label idx = i*nScalar+j;
            if (!dVByS_.set(idx))
            {
                FatalErrorInFunction
                    << "Jacobian not defined." << exit(FatalError);
            }
            return dVByS_[idx];
        }

        const fvjMatrix<tensor>& dVByV(const label i, const label j) const
        {
            const label idx = i*nVector+j;
            if (!dVByV_.set(idx))
            {
                FatalErrorInFunction
                    << "Jacobian not defined." << exit(FatalError);
            }
            return dVByV_[idx];
        }

        fvjMatrix<scalar>& dSByS(const label i, const label j)
        {
            const label idx = i*nScalar+j;
            if (!dSByS_.set(idx))
            {
                dSByS_.set
                (
                    idx,
                    new fvjMatrix<scalar>(mesh_)
                );
            }
            return dSByS_[idx];
        }

        fvjMatrix<vector>& dSByV(const label i, const label j)
        {
            const label idx = i*nVector+j;
            if (!dSByV_.set(idx))
            {
                dSByV_.set
                (
                    idx,
                    new fvjMatrix<vector>(mesh_)
                );
            }
            return dSByV_[idx];
        }

        fvjMatrix<vector>& dVByS(const label i, const label j)
        {
            const label idx = i*nScalar+j;
            if (!dVByS_.set(idx))
            {
                dVByS_.set
                (
                    idx,
                    new fvjMatrix<vector>(mesh_)
                );
            }
            return dVByS_[idx];
        }

        fvjMatrix<tensor>& dVByV(const label i, const label j)
        {
            const label idx = i*nVector+j;
            if (!dVByV_.set(idx))
            {
                dVByV_.set
                (
                    idx,
                    new fvjMatrix<tensor>(mesh_)
                );
            }
            return dVByV_[idx];
        }

        const fvMesh& mesh() const
        {
            return mesh_;
        }

        void matrixMul
        (
            PtrList<volScalarField>& sVec, PtrList<volVectorField>& vVec,
            PtrList<volScalarField>& sResult, PtrList<volVectorField>& vResult
        ) const;

        friend Ostream& operator<<(Ostream& os, const jacobianMatrix<nScalar, nVector>& jac)
        {
            os << jac.dSByS_ << endl;
            os << jac.dSByV_ << endl;
            os << jac.dVByS_ << endl;
            os << jac.dVByV_ << endl;

            return os;
        }

};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

typedef jacobianMatrix<2,1> compressibleJacobianMatrix;

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "jacobianMatrixTemplates.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
