/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::shockRefinement

Group
    grpFieldFunctionObjects

Description
    This function object generates a field intended to control the
    dynamicRefineFvMesh class.  It is designed to sense the presence of
    aerodynamic shock waves and allows for a given level of refinement to be
    achieved either relative to the existing refinement level of the base mesh,
    or in absolute terms.

    The sensing procedure is as described in Appendix C of:
    S.J. Hooseria, "Threeâ€“dimensional, Curved Shock Wave Interactions with
    Slender Bodies at Incidence", PhD Thesis, University of the Witwatersrand,
    Johannesburg, 2015.

    The field generated (refinementControl) has three possible values for each
    cell, with the following intended meanings:
        * -1 : Unrefine
        *  0 : Leave alone
        *  1 : Refine further

    The following is an example of the corresponding dynamicMeshDict:
    \verbatim
    dynamicFvMesh    dynamicRefineFvMesh;

    dynamicRefineFvMeshCoeffs
    {
        // How often to refine
        refineInterval  100;
        // Specifies field written by function object
        field           refinementControl;
        // Refine field inbetween lower..upper (refinementControl=1)
        lowerRefineLevel 0.5;
        upperRefineLevel 1.5;
        // If value < unrefineLevel unrefine (refinementControl=-1)
        unrefineLevel   -0.5;
        // For slower than 2:1 refinement
        nBufferLayers   1;
        // Refine cells only up to maxRefinement level (absolute)
        maxRefinement   20;
        // Stop refinement if maxCells reached
        maxCells        2000000000;
        correctFluxes
        (
            (phi none)
        );
        // Write refinement level to a scalar field
        dumpLevel       true;
    }
    \endverbatim

    This function object's dictionary entries are
        UInf         : Free-stream velocity; only its direction is used
        absolute     : Whether refinement levels below are absolute or relative to base mesh (default = yes)
        minCompLevel : Minimum refinement level for cells detected as compressive shocks
                       Default = 1 if relative, or max of initial cell levels if absolute
        maxCompLevel : Maximum refinement level for cells detected as compressive shocks
                       Default = minCompLevel
        minExpLevel  : Minimum refinement level for cells detected as expansion shocks
                       Default = 1 if relative, or max of initial cell levels if absolute
        maxExpLevel  : Maximum refinement level for cells detected as expansion shocks
                       Default = minExpLevel
        compSensCoeff: Sensitivity coefficient for compressive shocks -
                       number of mean average deviations to shift the threshold from the mean;
                       higher = more sensitive (default = 0; recommended 0 - 1)
        expSensCoeff : Sensitivity coefficient for expansion shocks -
                       number of mean average deviations to shift the threshold from the mean;
                       higher = more sensitive (default = -1; recommended -1 - 0)
        saveMarkedCells : Whether to output cells marked as compression/expansion shocks (default = no)

    Example of function object specification:
    \verbatim
    meshRefinement
    {
        type    shockRefinement;
        UInf    (1 0 0);
        maxCompLevel 2;
    }
    \endverbatim


SeeAlso
    Foam::fvMeshFunctionObject
    Foam::dynamicRefineFvMesh

SourceFiles
    shockRefinement.C

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef functionObjects_shockRefinement_H
#define functionObjects_shockRefinement_H

#include "fvMeshFunctionObject.H"
#include "fvCFD.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace functionObjects
{

/*---------------------------------------------------------------------------*\
                  Class shockRefinement Declaration
\*---------------------------------------------------------------------------*/

class shockRefinement
:
    public fvMeshFunctionObject
{
protected:

    // Protected data

        const objectRegistry& obr_;

        const dictionary dict_;

        autoPtr<IOdictionary> refineDict_;

        //- Free-stream velocity (only direction is used)
        vector UInf_;

        //- Whether level of refinement is relative to base mesh or absolute
        Switch absolute_;

        //- Min/Max level of refinement for compressive and expansion shocks
        label minCompLevel_;
        label maxCompLevel_;
        label minExpLevel_;
        label maxExpLevel_;

        //- Setting threshold level as a multiplier of mean average deviation
        scalar compSensCoeff_;
        scalar expSensCoeff_;

        //- Save the cells marked as compressive/expansion shocks for postprocessing
        bool saveMarkedCells_;

protected:

    // Protected member functions

        const fvMesh& mesh();

        //- Called at each ++ or += of the time-loop
        bool calc();

public:

    //- Runtime type information
    TypeName("shockRefinement");


    // Constructors

        //- Construct for given objectRegistry and dictionary.
        shockRefinement
        (
            const word& name,
            const objectRegistry&,
            const dictionary&
        );


    //- Destructor
    virtual ~shockRefinement();


    // Member Functions

        //- Read the parameters
        virtual bool read(const dictionary&);

        //- Calculate the result field
        virtual bool execute();

        //- Write the result field
        virtual bool write();

        //- Clear the objectRegistry
        //virtual bool clear();
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace functionObjects
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
