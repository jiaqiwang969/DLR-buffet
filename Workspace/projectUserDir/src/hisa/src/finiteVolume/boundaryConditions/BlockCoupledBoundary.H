/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2021 Oliver Oxtoby
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::BlockCoupledBoundary

Description
    Interface for block-coupled boundary conditions

SourceFiles
    BlockCoupledBoundary.C

Authors
    Johan Heyns
    Oliver Oxtoby
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef BlockCoupledBoundary_H
#define BlockCoupledBoundary_H

#include "fvPatchField.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                 Class BlockCoupledBoundary Declaration
\*---------------------------------------------------------------------------*/

template<class Type>
class BlockCoupledBoundary
{
protected:

    const fvPatchField<Type>& patchField_;

public:

    //- Runtime type information
    TypeName("BlockCoupledBoundary");


    //- Constructor
    BlockCoupledBoundary(const fvPatchField<Type>& pf)
    :
        patchField_(pf)
    {}

    //- Destructor
    virtual ~BlockCoupledBoundary() = default;


    // Virtual member functions

        //- Coupled coefficients with respect to another scalar field
        virtual tmp<Field<Type>> valueInternalCoeffs
        (
            const volScalarField& field
        ) const
        {
            NotImplemented;
            return tmp<Field<Type>>(new Field<Type>());
        }

        virtual tmp<Field<Type>> gradientInternalCoeffs
        (
            const volScalarField& field
        ) const
        {
            NotImplemented;
            return tmp<Field<Type>>(new Field<Type>());
        }

        //- Coupled coefficients with respect to another vector field
        virtual tmp<Field<typename outerProduct<Type,vector>::type>> valueInternalCoeffs
        (
            const volVectorField& field
        ) const
        {
            typedef typename outerProduct<Type,vector>::type ReturnType;
            NotImplemented;
            return tmp<Field<ReturnType>>(new Field<ReturnType>());
        }

        virtual tmp<Field<typename outerProduct<Type,vector>::type>> gradientInternalCoeffs
        (
            const volVectorField& field
        ) const
        {
            typedef typename outerProduct<Type,vector>::type ReturnType;
            NotImplemented;
            return tmp<Field<ReturnType>>(new Field<ReturnType>());
        }

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
