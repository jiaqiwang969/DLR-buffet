/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2021 Oliver Oxtoby

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

fvMesh& mesh = mesh_();

solidThermo& thermo = thermo_();
//radiation::radiationModel& radiation = radiation_();

solutionControl& solnControl = solnControl_();
const Time& runTime = time_;

tmp<volScalarField> trho = thermo.rho();
const volScalarField& rho = trho();

tmp<volScalarField> tcp = thermo.Cp();
const volScalarField& cp = tcp();

tmp<volSymmTensorField> taniAlpha;
if (!thermo.isotropic())
{
    tmp<volVectorField> tkappaByCp = thermo.Kappa()/cp;
    updateAniAlpha(tkappaByCp);
}

volScalarField& h = thermo.he();

const volScalarField& betav = betavSolid_();

#if FOUNDATION >= 9
fvModels& fvOptions = solidHeatSources_();
fvConstraints& fvConstraints = solidConstraints_();
#else
fv::options& fvOptions = solidHeatSources_();
#endif