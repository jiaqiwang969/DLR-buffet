/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::fvjMatrix

\*---------------------------------------------------------------------------*/

#ifndef fvjOperators_H
#define fvjOperators_H

#include "fvjMatrix.H"
#include "tmp.H"
#include "geometricOneField.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

namespace fvj
{

//- Divergence of a cell Jacobian field interpolated to faces with
//  the specified weighting

template<class LDUType>
tmp<fvjMatrix<typename innerProduct<LDUType,vector>::type> >
div
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf
);

template<class LDUType>
tmp<fvjMatrix<typename innerProduct<LDUType,vector>::type> >
jacDiv
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
div
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const GeometricField<LDUType, fvsPatchField, surfaceMesh>& sf
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
div
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const tmp<GeometricField<LDUType, fvsPatchField, surfaceMesh> >& tsf
);

template<class LDUType>
tmp<fvjMatrix<typename outerProduct<LDUType,vector>::type> >
grad
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf
);

template<class LDUType>
tmp<fvjMatrix<typename outerProduct<LDUType,vector>::type> >
grad
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf
);

tmp<fvjMatrix<vector> >
grad
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const geometricOneField&
);

template<class LDUType>
tmp<fvjMatrix<typename outerProduct<LDUType,vector>::type> >
gradT
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf
);

template<class LDUType>
tmp<fvjMatrix<typename outerProduct<LDUType,vector>::type> >
gradT
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& w,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
laplacian
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& sf,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
laplacian
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& sf,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
laplacian
(
    const tmp<GeometricField<scalar, fvsPatchField, surfaceMesh> >& tsf,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
laplacian
(
    const tmp<GeometricField<scalar, fvsPatchField, surfaceMesh> >& tsf,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
laplacian
(
    const GeometricField<LDUType, fvsPatchField, surfaceMesh>& sf,
    const geometricOneField&,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
laplacian
(
    const tmp<GeometricField<LDUType, fvsPatchField, surfaceMesh> >& tsf,
    const geometricOneField&,
    bool includePhysicalBoundaries=false
);


template<class LDUType>
tmp<fvjMatrix<LDUType> >
divGradT
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& sf,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
divGradT
(
    const GeometricField<scalar, fvsPatchField, surfaceMesh>& sf,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
divGradT
(
    const tmp<GeometricField<scalar, fvsPatchField, surfaceMesh> >& tsf,
    const GeometricField<LDUType, fvPatchField, volMesh>& vf,
    bool includePhysicalBoundaries=false
);

template<class LDUType>
tmp<fvjMatrix<LDUType> >
divGradT
(
    const tmp<GeometricField<scalar, fvsPatchField, surfaceMesh> >& tsf,
    const tmp<GeometricField<LDUType, fvPatchField, volMesh> >& tvf,
    bool includePhysicalBoundaries=false
);



// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace fvj

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "fvjOperatorsTemplates.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
