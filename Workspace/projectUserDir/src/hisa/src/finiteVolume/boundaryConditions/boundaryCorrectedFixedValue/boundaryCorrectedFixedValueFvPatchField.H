/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::boundaryCorrectedFixedValueFvPatchField

Group
    grpGenericBoundaryConditions

Description
    fixedGradient boundary condition which calculates snGrad at
    boundary assuming boundary face values not at the centroid but
    adjacent to internal cell centroid.

    Intended for use in conjunction with faceLeastSquares gradient scheme.

SourceFiles
    boundaryCorrectedFixedValueFvPatchField.C

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

    Based on fixedValue boundary condition of OpenFOAM

\*---------------------------------------------------------------------------*/

#ifndef boundaryCorrectedFixedValueFvPatchField_H
#define boundaryCorrectedFixedValueFvPatchField_H

#include "fixedValueFvPatchFields.H"
#include "fvsPatchFields.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
           Class boundaryCorrectedFixedValueFvPatchField Declaration
\*---------------------------------------------------------------------------*/

template<class Type>
class boundaryCorrectedFixedValueFvPatchField
:
    public fixedValueFvPatchField<Type>
{

public:

    //- Runtime type information
    TypeName("boundaryCorrectedFixedValue");


    // Constructors

        //- Construct from patch and internal field
        boundaryCorrectedFixedValueFvPatchField
        (
            const fvPatch&,
            const DimensionedField<Type, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        boundaryCorrectedFixedValueFvPatchField
        (
            const fvPatch&,
            const DimensionedField<Type, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping the given boundaryCorrectedFixedValueFvPatchField<Type>
        //  onto a new patch
        boundaryCorrectedFixedValueFvPatchField
        (
            const boundaryCorrectedFixedValueFvPatchField<Type>&,
            const fvPatch&,
            const DimensionedField<Type, volMesh>&,
            const fvPatchFieldMapper&
        );

#if FOUNDATION >= 9
#else
        //- Construct and return a clone
        virtual tmp<fvPatchField<Type> > clone() const
        {
            return tmp<fvPatchField<Type> >
            (
                new boundaryCorrectedFixedValueFvPatchField<Type>
                (
                    *this, this->internalField()
                )
            );
        }
#endif

        //- Construct as copy setting internal field reference
        boundaryCorrectedFixedValueFvPatchField
        (
            const boundaryCorrectedFixedValueFvPatchField<Type>&,
            const DimensionedField<Type, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchField<Type> > clone
        (
            const DimensionedField<Type, volMesh>& iF
        ) const
        {
            return tmp<fvPatchField<Type> >
            (
                new boundaryCorrectedFixedValueFvPatchField<Type>(*this, iF)
            );
        }


    // Member functions

        // Evaluation functions

            //- Return gradient at boundary
            virtual tmp<Field<Type> > snGrad() const;

            //- Return the matrix diagonal coefficients corresponding to the
            //  evaluation of the gradient of this patchField
            virtual tmp<Field<Type> > gradientInternalCoeffs() const;

            //- Return the matrix source coefficients corresponding to the
            //  evaluation of the gradient of this patchField
            virtual tmp<Field<Type> > gradientBoundaryCoeffs() const;
};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "boundaryCorrectedFixedValueFvPatchField.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
