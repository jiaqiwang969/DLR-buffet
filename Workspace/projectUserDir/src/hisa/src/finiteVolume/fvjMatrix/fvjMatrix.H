/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::fvjMatrix

Description
    Matrix class for Jacobian (sensitivity) matrices.

SourceFiles
    fvjMatrix.C

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef fvjMatrix_H
#define fvjMatrix_H

#include "LduMatrix.H"
#include "tmp.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of friend functions and operators

template<class LDUType>
class fvjMatrix;

template<class Type2>
tmp<fvjMatrix<Type2> > operator*(const tmp<fvjMatrix<scalar> >& tA, const Type2& B);


/*---------------------------------------------------------------------------*\
                           Class fvjMatrix Declaration
\*---------------------------------------------------------------------------*/

template<class LDUType>
class fvjMatrix
:
    public refCount,
    public LduMatrix<LDUType, LDUType, LDUType>
{
    // Private data

protected:

    // Protected Member Functions

public:

    ClassName("fvjMatrix");


    // Constructors

        //- Construct given a field to solve for
        fvjMatrix(const lduMesh&);

        //- Construct as copy
        fvjMatrix(const fvjMatrix<LDUType>&);

        //- Construct as copy of tmp<fvjMatrix<Type> >, re-using pointers if possible
        #ifdef ConstructFromTmp
        fvjMatrix(const tmp<fvjMatrix<LDUType> >&);
        #endif

        //- Clone
        tmp<fvjMatrix<LDUType>> clone() const;

    //- Destructor
    virtual ~fvjMatrix();

    // Member functions

        //- Convenience functions to return the interface field or a zero field
        // if absent
        using LduMatrix<LDUType, LDUType, LDUType>::interfacesUpper;
        using LduMatrix<LDUType, LDUType, LDUType>::interfacesLower;
        tmp<Field<LDUType>> interfacesUpper(const label patchi);
        tmp<Field<LDUType>> interfacesLower(const label patchi);

        template<class psiType, class ApsiType>
        void Amul
        (
            Field<ApsiType>& Apsi,
            const Field<psiType>& psi
        ) const;


    //- Operators
    void operator=(const fvjMatrix<LDUType>&);
    void operator=(const tmp<fvjMatrix<LDUType> >&);
    fvjMatrix<LDUType>& operator+=(const fvjMatrix<LDUType>&);
    fvjMatrix<LDUType>& operator+=(const tmp<fvjMatrix<LDUType> >&);
    fvjMatrix<LDUType>& operator-=(const fvjMatrix<LDUType>&);
    fvjMatrix<LDUType>& operator-=(const tmp<fvjMatrix<LDUType> >&);

    //- Friends

    template<class Type2>
    friend tmp<fvjMatrix<Type2> > operator*(const tmp<fvjMatrix<scalar> >& tA, const Type2& B);

};


template<class LDUType>
tmp<fvjMatrix<LDUType> > operator+
(
    const fvjMatrix<LDUType>&,
    const fvjMatrix<LDUType>&
);

template<class LDUType>
tmp<fvjMatrix<LDUType> > operator+
(
    const tmp<fvjMatrix<LDUType> >&,
    const fvjMatrix<LDUType>&
);

template<class LDUType>
tmp<fvjMatrix<LDUType> > operator+
(
    const fvjMatrix<LDUType>&,
    const tmp<fvjMatrix<LDUType> >&
);

template<class LDUType>
tmp<fvjMatrix<LDUType> > operator+
(
    const tmp<fvjMatrix<LDUType> >&,
    const tmp<fvjMatrix<LDUType> >&
);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "fvjMatrix.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
