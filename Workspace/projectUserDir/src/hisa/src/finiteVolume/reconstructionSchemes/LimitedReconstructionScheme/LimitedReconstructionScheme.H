/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2016 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::LimitedReconstructionScheme

Group
    grpFvReconstructionSchemes

Description
    Class to create NVD/TVD limited weighting-factors.

    The particular differencing scheme class is supplied as a template
    argument, the weight function of which is called by the weight function
    of this class for the internal faces as well as faces of coupled
    patches (e.g. processor-processor patches). The weight function is
    supplied the central-differencing weighting factor, the face-flux, the
    cell and face gradients (from which the normalised variable
    distribution may be created) and the cell centre distance.

    This code organisation is both neat and efficient, allowing for
    convenient implementation of new schemes to run on parallelised cases.

See also
    LimitedScheme

SourceFiles
    LimitedReconstructionScheme.C

\*---------------------------------------------------------------------------*/

#ifndef LimitedReconstructionScheme_H
#define LimitedReconstructionScheme_H

#include "reconstructionScheme.H"
#ifdef BLUECFD
#include "LimitFuncs.T.H"
#else
#include "LimitFuncs.H"
#endif
#include "NVDTVD.H"
#include "NVDVTVDV.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
               Class LimitedReconstructionScheme Declaration
\*---------------------------------------------------------------------------*/

template<class Type, class Limiter, template<class> class LimitFunc>
class LimitedReconstructionScheme
:
    public reconstructionScheme<Type>,
    public Limiter
{
    // Private data

        word gradSchemeName_;

    // Private Member Functions

        //- Calculate the limiter
        void calcLimiter
        (
            const GeometricField<Type, fvPatchField, volMesh>& phi,
            GeometricField<Type, fvsPatchField, surfaceMesh>& limiterField_L,
            GeometricField<Type, fvsPatchField, surfaceMesh>& limiterField_R
        ) const;

        //- Disallow default bitwise copy construct
        LimitedReconstructionScheme(const LimitedReconstructionScheme&);

        //- Disallow default bitwise assignment
        void operator=(const LimitedReconstructionScheme&);


public:

    //- Runtime type information
    TypeName("LimitedReconstructionScheme");

    typedef Limiter LimiterType;

    // Constructors

        //- Construct from mesh and limiter scheme
        LimitedReconstructionScheme
        (
            const fvMesh& mesh,
            const Limiter& weight
        )
        :
            reconstructionScheme<Type>(mesh),
            Limiter(weight)
        {}

        //- Construct from mesh and Istream.
        LimitedReconstructionScheme
        (
            const fvMesh& mesh,
            Istream& is
        )
        :
            reconstructionScheme<Type>(mesh, is),
            Limiter(is)
        {
            if (!is.eof())
            {
                gradSchemeName_ = word(is);
            }
        }


    // Member Functions

        //- Return the interpolation weighting factors
        virtual void limiter
        (
            const GeometricField<Type, fvPatchField, volMesh>& phi,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tLimiterField_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tLimiterField_R
        ) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Add the patch constructor functions to the hash tables

#define makeLimitedReconstructionTypeScheme\
(                                                                              \
    SS,                                                                        \
    LIMITER,                                                                   \
    NVDTVD,                                                                    \
    LIMFUNC,                                                                   \
    TYPE                                                                       \
)                                                                              \
                                                                               \
typedef LimitedReconstructionScheme<TYPE, LIMITER<NVDTVD>, limitFuncs::LIMFUNC>              \
    LimitedReconstructionScheme##TYPE##LIMITER##NVDTVD##LIMFUNC##_;                          \
defineTemplateTypeNameAndDebugWithName                                         \
    (LimitedReconstructionScheme##TYPE##LIMITER##NVDTVD##LIMFUNC##_, #SS, 0);                \
                                                                               \
reconstructionScheme<TYPE>::addMeshConstructorToTable             \
<LimitedReconstructionScheme<TYPE, LIMITER<NVDTVD>, limitFuncs::LIMFUNC>>                    \
    add##SS##LIMFUNC##TYPE##MeshConstructorToReconstructionTable_;


#define makeLimitedReconstructionScheme(SS, LIMITER)                     \
                                                                               \
makeLimitedReconstructionTypeScheme(SS,LIMITER,NVDTVD,null,scalar)     \
makeLimitedReconstructionTypeScheme(SS,LIMITER,NVDTVD,null,vector)


#define makeLimitedVReconstructionScheme(SS, LIMITER)                    \
makeLimitedReconstructionTypeScheme(SS,LIMITER,NVDVTVDV,null,vector)


#define makeLLimitedReconstructionTypeScheme\
(                                                                              \
    SS,                                                                        \
    LLIMITER,                                                                  \
    LIMITER,                                                                   \
    NVDTVD,                                                                    \
    LIMFUNC,                                                                   \
    TYPE                                                                       \
)                                                                              \
                                                                               \
typedef LimitedReconstructionScheme<TYPE, LLIMITER<LIMITER<NVDTVD>>, limitFuncs::LIMFUNC>    \
    LimitedReconstructionScheme##TYPE##LLIMITER##LIMITER##NVDTVD##LIMFUNC##_;                \
defineTemplateTypeNameAndDebugWithName                                         \
    (LimitedReconstructionScheme##TYPE##LLIMITER##LIMITER##NVDTVD##LIMFUNC##_, #SS, 0);      \
                                                                               \
reconstructionScheme<TYPE>::addMeshConstructorToTable             \
<LimitedReconstructionScheme<TYPE, LLIMITER<LIMITER<NVDTVD>>, limitFuncs::LIMFUNC>>          \
    add##SS##LIMFUNC##TYPE##MeshConstructorToLimitedTable_;


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
    #include "LimitedReconstructionScheme.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
