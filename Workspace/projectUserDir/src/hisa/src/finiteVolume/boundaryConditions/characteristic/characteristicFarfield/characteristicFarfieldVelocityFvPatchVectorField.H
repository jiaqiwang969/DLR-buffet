/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::characteristicFarfieldVelocityFvPatchVectorField

Group
    grpInletBoundaryConditions grpOutletBoundaryConditions

Description
    This boundary condition provides a non-reflecting far-field condition.
    See characteristicBase for usage.

SourceFiles
    characteristicFarfieldVelocityFvPatchVectorField.C

Authors
    Johan Heyns
    Oliver Oxtoby
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef characteristicFarfieldVelocityFvPatchVectorFields_H
#define characteristicFarfieldVelocityFvPatchVectorFields_H

#include "fvPatchFields.H"
#include "mixedFvPatchFields.H"
#include "characteristicBase.H"
#include "BlockCoupledBoundary.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
           Class characteristicFarfieldVelocityFvPatchVectorField Declaration
\*---------------------------------------------------------------------------*/

class characteristicFarfieldVelocityFvPatchVectorField
:
    public mixedFvPatchVectorField,
    public characteristicBase,
    public BlockCoupledBoundary<vector>
{
protected:

    tensorField UCoeff_;
    vectorField pCoeff_;

public:

    //- Runtime type information
    TypeName("characteristicFarfieldVelocity");


    // Constructors

        //- Construct from patch and internal field
        characteristicFarfieldVelocityFvPatchVectorField
        (
            const fvPatch&,
            const DimensionedField<vector, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        characteristicFarfieldVelocityFvPatchVectorField
        (
            const fvPatch&,
            const DimensionedField<vector, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping given characteristicFarfieldVelocityFvPatchVectorField
        //  onto a new patch
        characteristicFarfieldVelocityFvPatchVectorField
        (
            const characteristicFarfieldVelocityFvPatchVectorField&,
            const fvPatch&,
            const DimensionedField<vector, volMesh>&,
            const fvPatchFieldMapper&
        );

        //- Construct as copy
        characteristicFarfieldVelocityFvPatchVectorField
        (
            const characteristicFarfieldVelocityFvPatchVectorField&
        ) = delete;

#if FOUNDATION >= 9
#else
        //- Construct and return a clone
        virtual tmp<fvPatchVectorField> clone() const override
        {
            return tmp<fvPatchVectorField>
            (
                new characteristicFarfieldVelocityFvPatchVectorField
                (
                    *this, this->internalField()
                )
            );
        }
#endif

        //- Construct as copy setting internal field reference
        characteristicFarfieldVelocityFvPatchVectorField
        (
            const characteristicFarfieldVelocityFvPatchVectorField&,
            const DimensionedField<vector, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchVectorField> clone
        (
            const DimensionedField<vector, volMesh>& iF
        ) const override
        {
            return tmp<fvPatchVectorField>
            (
                new characteristicFarfieldVelocityFvPatchVectorField(*this, iF)
            );
        }


    // Member functions

        // Mapping functions

            //- Map (and resize as needed) from self given a mapping object
            virtual void autoMap
            (
                const fvPatchFieldMapper&
            ) override;

            //- Reverse map the given fvPatchField onto this fvPatchField
            virtual void rmap
            (
                const fvPatchVectorField&,
                const labelList&
            ) override;

        // Evaluation functions

            //- Update the coefficients associated with the patch field
            virtual void updateCoeffs() override;

        //- Block-coupled boundary coefficients

            virtual tmp<vectorField> valueInternalCoeffs
            (
                const volScalarField& field
            ) const override;

            virtual tmp<vectorField> gradientInternalCoeffs
            (
                const volScalarField& field
            ) const override;

            virtual tmp<tensorField> valueInternalCoeffs
            (
                const volVectorField& field
            ) const override;

            virtual tmp<tensorField> gradientInternalCoeffs
            (
                const volVectorField& field
            ) const override;

        //- Write
        virtual void write(Ostream&) const override;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
