/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

    PtrList<solverModule> solvers;

#if OPENFOAM >= 1906
    const entry* entryPtr = runTime.controlDict().findEntry
    (
        "regions",
        keyType::LITERAL
    );
#else
    const entry* entryPtr = runTime.controlDict().lookupEntryPtr
    (
        "regions",
        false,
        false
    );
#endif

    if (entryPtr)
    {
        if (entryPtr->isDict())
        {
            // a dictionary of region information
            const dictionary& regionDicts = entryPtr->dict();

            int i = 0;
            forAllConstIter(dictionary, regionDicts, iter)
            {
                if (!iter().isDict())
                {
                    FatalIOErrorIn("multiRegionSolver", regionDicts)
                        << "'regions' dictionary may only contain subdictionaries."
                        << exit(FatalIOError);
                }

                const word& name = iter().keyword();
                const dictionary& dict = iter().dict();

                solvers.resize(i+1);
                solvers.set
                (
                    i++,
                    solverModule::New(name, runTime, dict).ptr()
                );
            }
        }

    }
    else
    {
        FatalIOErrorIn("multiRegionSolver", runTime.controlDict())
            << "'regions' dictionary not found."
            << exit(FatalIOError);
    }

