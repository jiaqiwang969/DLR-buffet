/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::residualIO

Description
    Small wrapper class to input and output residual norms.

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef residualIO_H
#define residualIO_H

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                        Class residualIO Declaration
\*---------------------------------------------------------------------------*/

class residualIO
{

protected:

    labelList residualOrdering_;
    List<scalar> sResidual_;
    List<vector> vResidual_;

public:

    residualIO(const label nScalars, const label nVectors, const labelList& residualOrdering, const scalar constVal=0.0)
     :
        residualOrdering_(residualOrdering),
        sResidual_(nScalars, constVal),
        vResidual_(nVectors, vector(constVal, constVal, constVal))
    {
        forAll(residualOrdering_, i)
        {
            if (residualOrdering_[i] >= nScalars+nVectors)
            {
                FatalErrorInFunction
                    << "Invalid residual ordering specified."
                    << exit(FatalError);
            }
        }
    }

    residualIO(const residualIO& res)
     :
        residualOrdering_(res.residualOrdering_),
        sResidual_(res.sResidual_),
        vResidual_(res.vResidual_)
    {}

    //- Initialise with uniform values
    residualIO(const residualIO& res, scalar constVal)
     :
        residualOrdering_(res.residualOrdering_),
        sResidual_(res.sResidual_.size(), constVal),
        vResidual_(res.vResidual_.size(), vector(constVal, constVal, constVal))
    {}

    const residualIO& operator=(const residualIO& res)
    {
        residualOrdering_ = res.residualOrdering_;
        sResidual_  = res.sResidual_;
        vResidual_ = res.vResidual_;
        return *this;
    }

    void setScalar(const label i, const scalar& val)
    {
        sResidual_[i] = val;
    }

    scalar getScalar(const label i)
    {
        return sResidual_[i];
    }

    void setVector(const label i, const vector& val)
    {
        vResidual_[i] = val;
    }

    vector getVector(const label i)
    {
        return vResidual_[i];
    }

    const labelList& residualOrdering() const
    {
        return residualOrdering_;
    }

    friend autoPtr< residualIO > operator/(const residualIO& val1, const residualIO& val2)
    {
        autoPtr< residualIO > pRes(new residualIO(val1));
        residualIO& res(pRes());
        forAll(val2.sResidual_, i)
        {
            res.sResidual_[i] /= val2.sResidual_[i];
        }
        forAll(val2.vResidual_, i)
        {
            res.vResidual_[i] = cmptDivide(res.vResidual_[i], val2.vResidual_[i]);
        }
        return pRes;
    }

    friend autoPtr< residualIO > operator/(const residualIO& val1, autoPtr< residualIO >& pVal2)
    {
        residualIO& val2 = pVal2();
        autoPtr< residualIO > retVal = operator/(val1, val2);
        pVal2.clear();
        return retVal;
    }

    friend autoPtr< residualIO > operator+(const residualIO& val1, const scalar& s)
    {
        autoPtr< residualIO > pRes(new residualIO(val1));
        residualIO& res(pRes());
        forAll(val1.sResidual_, i)
        {
            res.sResidual_[i] += s;
        }
        forAll(val1.vResidual_, i)
        {
            res.vResidual_[i] += vector(s, s, s);
        }
        return pRes;
    }

    friend scalar max(const residualIO& res)
    {
        scalar maxVal(-VGREAT);
        forAll(res.sResidual_, i)
        {
            maxVal = max(maxVal,res.sResidual_[i]);
        }
        forAll(res.vResidual_, i)
        {
            maxVal = max(maxVal,cmptMax(res.vResidual_[i]));
        }
        return maxVal;
    }

    friend scalar max(autoPtr< residualIO >& res)
    {
        scalar result = max(res());
        res.clear();
        return result;
    }

    friend Istream& operator>>(Istream& is, residualIO& res)
    {
        forAll(res.residualOrdering_, i)
        {
            if (res.residualOrdering_[i] < res.sResidual_.size())
            {
                is >> res.sResidual_[res.residualOrdering_[i]];
            }
            else
            {
                is >> res.vResidual_[res.residualOrdering_[i]-res.sResidual_.size()];
            }
        }
        return is;
    }

    friend Ostream& operator<<(Ostream& os, const residualIO& res)
    {
        forAll(res.residualOrdering_, i)
        {
            if (res.residualOrdering_[i] < res.sResidual_.size())
            {
                os << res.sResidual_[res.residualOrdering_[i]];
            }
            else
            {
                os << res.vResidual_[res.residualOrdering_[i]-res.sResidual_.size()];
            }
            os << " ";
        }
        return os;
    }
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
