/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Ridhwaan Suliman - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2013 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::modalSolver

Description
    This function object integrates the quadratic modal equations of motion
    by integrating the pressure and skin-friction forces over a given
    list of patches.

    Includes Aitken convergence acceleration for fluid-solid coupling.

    Example of function object specification:
    \verbatim
    modalSolver1
    {
        type        modalSolver;
        functionObjectLibs ("libmodal.so");
        ...
        log         yes;
        patches     (walls);
    }
    \endverbatim

    \heading Function object usage
    \table
        Property     | Description             | Required    | Default value
        type         | type name: modalSolver  | yes         |
        log          | write force data to standard output | no | no
        patches      | patches included in the modalSolver calculation | yes |
        pName        | pressure field name     | no          | p
        UName        | velocity field name     | no          | U
        rhoName      | density field name (see below) | no   | rho
        directForceDensity | force density supplied directly (see below)|no|no
        fDName       | name of force density field (see below) | no | fD
        pRef         | assumed pressure inside solid | no    | 0
        rhoInf       | constant density to use for incompressible  | no | 1
        massMatrix   | mass matrix in row-major array form | yes |
        dampingMatrix   | damping matrix in row-major array form | yes |
        stiffnessMatrix   | stiffness matrix in row-major array form | yes |
        initialForceRelaxation | under-relaxation applied to generalised forces | no | 1.0
        overRelaxLimit | highest allowed value of relaxation | 10
        negOverRelaxLimit | lowest allowed value of relaxation | -1
    \endtable

Note
  - Mode shapes are supplied in modalMotionPointPatchVectorField boundary patch.
  - For incompressible cases, if no field named \c rhoName is found, or if
    \c rhoName is set to \c rhoInf, you will be
    required to provide a \c rhoInf value corresponding to the free-stream
    constant density.
  - If the force density is supplied directly, set the \c directForceDensity
    flag to 'yes', and supply the force density field using the \c
    fDName entry
  - initialForceRelaxation specifies the under-relaxation applied to the
    generalised forces for the first two outer iterations of each timestep.
    Thereafter it is calculated by the Aitken acceleration.

SeeAlso
    Foam::functionObject
    Foam::OutputFilterFunctionObject
    Foam::forceCoeffs

SourceFiles
    modalSolver.C
    IOmodalSolver.H

Authors
    Oliver Oxtoby
    Ridhwaan Suliman
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef modalSolver_H
#define modalSolver_H

#include "functionObject.H"
#include "primitiveFieldsFwd.H"
#include "volFieldsFwd.H"
#ifdef BLUECFD
#include "HashSet.T.H"
#include "Tuple2.T.H"
#else
#include "HashSet.H"
#include "Tuple2.H"
#endif
#include "OFstream.H"
#include "Switch.H"
#include "modalOde.H"
#include "regIOobject.H"
#include "IOdictionary.H"
#include "fvMeshFunctionObject.H"
#if FOUNDATION >= 5 or defined(OPENFOAM)
#include "logFiles.H"
#else
#include "writeFiles.H"
#endif


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

// Forward declaration of classes
class objectRegistry;
class dictionary;
class polyMesh;
class mapPolyMesh;

namespace functionObjects
{

/*---------------------------------------------------------------------------*\
                           Class modalSolver Declaration
\*---------------------------------------------------------------------------*/

class modalSolver
:
#if FOUNDATION >= 5 or defined(OPENFOAM)
    public fvMeshFunctionObject,
    public logFiles
#else
    public writeFiles
#endif
{
protected:

    // Protected data

        //- Name of this modal solver,
        //  Also used as the name of the output directory in postProcessing.
        const word name_;

        const Time& time_;

        Foam::dictionary dict_;

        //- Number of *linear* modes
        label nModes_;

        //- Switch to turn on steady-state calculation
        Switch steadyState_;

        //- Mass, damping and stiffness matrices stored row-major
        scalarField massMatrix_;
        scalarField dampingMatrix_;
        scalarField stiffnessMatrix_;

        //- Modal variables
        scalarField u_, uprev_; // Coordinates
        scalarField v_, vprev_; // Velocities
        IOdictionary modalVars_; // For reading/writing modal variables to/from time directories

        //- The latest time index
        label lastTimeIndex_;

        //- The ODE solver
        autoPtr<ODESolver> odeSolver_;

        //- The ODE
        modalOde ode_;

        //- Per region, whether it's already been called for relevant patch. For caching.
        List< HashTable< bool, label, Hash<label> > > calledForPatch_;


        // Read from dictionary

            //- Patches to integrate forces over. Per region.
            List< labelHashSet > patchSet_;

            //- Region names in the same order as above
            List< word > regions_;

            //- Name of pressure field
            word pName_;

            //- Name of velocity field
            word UName_;

            //- Name of density field (optional)
            word rhoName_;

            //- Is the force density being supplied directly?
            Switch directForceDensity_;

            //- The name of the force density (fD) field
            word fDName_;

            //- Reference density needed for incompressible calculations
            scalar rhoRef_;

            //- Reference pressure
            scalar pRef_;


        scalarField genForcesConst_;
        scalarField genForcesLinCoeffs_;
        scalarField genForcesConst0_; //Beginning of timestep values
        scalarField genForcesLinCoeffs0_;

        //- Forces relaxation coefficient
        scalarField forcesRelax_;
        scalarField forcesLinCoeffsRelax_;

        //- Sanity limits
        scalar overRelaxLimit_;
        scalar negOverRelaxLimit_;

        //- True for first iteration of timestep
        bool firstIteration_;
        bool secondIteration_;

        //- Store previous increment in forces
        scalarField forcesIncrementPrevIter_;
        scalarField forcesLinCoeffsIncrementPrevIter_;

        //- Latest Aitken relaxation factor
        scalarField forcesRelaxCurr_;
        scalarField forcesLinCoeffsRelaxCurr_;


    // Protected Member Functions

        //- Read dictionary
        virtual void readDict(const dictionary& dict);

        //- Output file header information
        virtual void writeFileHeader(const label i);

        //- Return the effective viscous stress (laminar + turbulent).
        tmp<volSymmTensorField> devRhoReff(const Foam::objectRegistry& obr) const;

        //- Return rho if rhoName is specified otherwise rhoRef
        tmp<volScalarField> rho(const Foam::objectRegistry& obr) const;

        //- Return rhoRef if the pressure field is dynamic, i.e. p/rho
        //  otherwise return 1
        scalar rho(const volScalarField& p) const;

        //- Disallow default bitwise copy construct
        modalSolver(const modalSolver&);

        //- Disallow default bitwise assignment
        void operator=(const modalSolver&);

        //- Recalculate the generalised forces
        virtual void updateGenForces();

public:

    //- Runtime type information
    TypeName("modalSolver");


    // Constructors

        //- Constructor
        modalSolver
        (
            const word& name,
            const Time&,
            const dictionary&
        );

    //- Destructor
    virtual ~modalSolver();


    // Member Functions

        //- Return name of the modalSolver
        virtual const word& name() const
        {
            return name_;
        }

        //- Read the modalSolver data
        virtual bool read(const dictionary&);

        //- Execute the function object
        // Nothing happens here but rather in the updaceCoeffs function
        // called by the associated BCs
        virtual bool execute() { return true; };

        //- Write the output
        virtual bool write();

        //- Recalculate the current timestep values. Called by associated BC.
        virtual void updateCoeffs();

        //- Return the cached displacement for a particular patch, recalculating values if necessary
        virtual void getPatchDispl(const word& region, const label& patchId, const List<vectorField>& mode, vectorField& patchDispl);

        //- Update for changes of mesh
        virtual void updateMesh(const mapPolyMesh&)
        {}

        //- Update for changes of mesh
        virtual void movePoints(const polyMesh& mesh)
        {}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace functionObjects
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
