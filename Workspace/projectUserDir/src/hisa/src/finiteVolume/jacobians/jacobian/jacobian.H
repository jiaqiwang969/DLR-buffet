/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2017 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2017 Johan Heyns - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::jacobian

Description
    Container for inviscid and viscous Jacobian schemes

SourceFiles
    jacobian.C

Authors
    Oliver Oxtoby
    Johan Heyns
    Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef jacobian_H
#define jacobian_H

#include "jacobianMatrix.H"
#include "jacobianInviscid.H"
#include "jacobianViscous.H"
#include "IOdictionary.H"
#include "volFields.H"
#include "fvCFD.H"
#include "autoPtr.H"
#include "runTimeSelectionTables.H"
#if FOUNDATION >= 8
#if FOUNDATION >= 9
#include "dynamicMomentumTransportModel.H"
#else
#include "fluidThermoMomentumTransportModel.H"
#endif
#include "fluidThermophysicalTransportModel.H"
#else
#include "turbulentFluidThermoModel.H"
#endif
#include "psiThermo.H"


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                       Class jacobian Declaration
\*---------------------------------------------------------------------------*/

class jacobian
{

protected:
    // Protected data

        // Data references
        const fvMesh& mesh_;
        const volScalarField& rho_;
        const volVectorField& rhoU_;
        const volScalarField& rhoE_;
        const psiThermo& thermo_;
        const volVectorField& U_;
        const scalarField& ddtCoeff_;  // 1/dt or similar

        compressibleJacobianMatrix jacobianMatrix_;

        autoPtr<jacobianInviscid> jacobianInviscid_;
        autoPtr<jacobianViscous> jacobianViscous_;

private:
    // Private Member Functions

        //- Disallow copy construct
        jacobian(const jacobian&);

        //- Disallow default bitwise assignment
        void operator=(const jacobian&);

protected:
    // Protected member functions

        //- Convert the boundary Jacobians w.r.t. the primitive variables and
        // add to main Jacobian
        virtual void addBoundaryTerms();

        //- Compute the temporal contribution to the approximate
        // and full Jacobian diagonal matrices
        virtual void addTemporalTerms();

        virtual const compressibleJacobianMatrix& constructJacobian();

public:
    //- Runtime type information
    TypeName("jacobian");


	// Constructors

        //- Construct from components
        jacobian
        (
            const dictionary& dict,
            const fvMesh& mesh,
            const volScalarField& rho,
            const volVectorField& rhoU,
            const volScalarField& rhoE,
            const psiThermo& thermo,
            const volVectorField& U,
            const scalarField& ddtCoeff,
            const bool& inviscid,
#if FOUNDATION >= 8
            const compressible::momentumTransportModel& turbulence,
            const thermophysicalTransportModel& thermophysicalTransport
#else
            const compressible::turbulenceModel& turbulence
#endif
        );


    // Destructor

        virtual ~jacobian();


    // Member Functions

        virtual const compressibleJacobianMatrix& matrix()
        {
            return jacobianMatrix_;
        }
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
