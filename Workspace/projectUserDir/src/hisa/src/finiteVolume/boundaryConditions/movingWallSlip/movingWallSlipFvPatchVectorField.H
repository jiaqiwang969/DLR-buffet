/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::movingWallSlipFvPatchVectorField

Group
    grpGenericBoundaryConditions grpWallBoundaryConditions

Description
    This boundary condition sets the patch-normal component to that of the mesh
    motion.

    Example of the boundary condition specification:
    \verbatim
    myPatch
    {
        type            movingWallSlip;
    }
    \endverbatim

SeeAlso
    Foam::fixedNormalSlipFvPatchField

SourceFiles
    movingWallSlipFvPatchVectorField.C

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef movingWallSlipFvPatchVectorField_H
#define movingWallSlipFvPatchVectorField_H

#include "transformFvPatchField.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                 Class movingWallSlipFvPatchVectorField Declaration
\*---------------------------------------------------------------------------*/

class movingWallSlipFvPatchVectorField
:
    public transformFvPatchField<vector>
{
    // Private data


public:

    //- Runtime type information
    TypeName("movingWallSlip");


    // Constructors

        //- Construct from patch and internal field
        movingWallSlipFvPatchVectorField
        (
            const fvPatch&,
            const DimensionedField<vector, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        movingWallSlipFvPatchVectorField
        (
            const fvPatch&,
            const DimensionedField<vector, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping given movingWallSlipFvPatchVectorField
        //  onto a new patch
        movingWallSlipFvPatchVectorField
        (
            const movingWallSlipFvPatchVectorField&,
            const fvPatch&,
            const DimensionedField<vector, volMesh>&,
            const fvPatchFieldMapper&
        );

        //- Construct as copy
        movingWallSlipFvPatchVectorField
        (
            const movingWallSlipFvPatchVectorField&
        ) = delete;

#if FOUNDATION >= 9
#else
        //- Construct and return a clone
        virtual tmp<fvPatchVectorField > clone() const
        {
            return tmp<fvPatchVectorField >
            (
                new movingWallSlipFvPatchVectorField(*this, this->internalField())
            );
        }
#endif

        //- Construct as copy setting internal field reference
        movingWallSlipFvPatchVectorField
        (
            const movingWallSlipFvPatchVectorField&,
            const DimensionedField<vector, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchVectorField > clone
        (
            const DimensionedField<vector, volMesh>& iF
        ) const
        {
            return tmp<fvPatchVectorField >
            (
                new movingWallSlipFvPatchVectorField(*this, iF)
            );
        }


    // Member functions

        // Mapping functions

            //- Map (and resize as needed) from self given a mapping object
            virtual void autoMap
            (
                const fvPatchFieldMapper&
            );

            //- Reverse map the given fvPatchField onto this fvPatchField
            virtual void rmap
            (
                const fvPatchVectorField&,
                const labelList&
            );


        // Evaluation functions

            //- Return gradient at boundary
            virtual tmp<vectorField> snGrad() const;

            //- Evaluate the patch field
            virtual void evaluate
            (
                const Pstream::commsTypes commsType=Pstream::commsTypes::blocking
            );

            //- Return face-gradient transform diagonal
            virtual tmp<vectorField> snGradTransformDiag() const;


	//- Write
	virtual void write(Ostream&) const;


    // Member operators

        virtual void operator=(const UList<vector>&) {}

        virtual void operator=(const fvPatchVectorField&) {}
        virtual void operator+=(const fvPatchVectorField&) {}
        virtual void operator-=(const fvPatchVectorField&) {}
        virtual void operator*=(const fvPatchScalarField&) {}
        virtual void operator/=(const fvPatchScalarField&) {}

        virtual void operator+=(const vectorField&) {}
        virtual void operator-=(const vectorField&) {}

        virtual void operator*=(const scalarField&) {}
        virtual void operator/=(const scalarField&) {}

        virtual void operator=(const vector&) {}
        virtual void operator+=(const vector&) {}
        virtual void operator-=(const vector&) {}
        virtual void operator*=(const scalar) {}
        virtual void operator/=(const scalar) {}
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
