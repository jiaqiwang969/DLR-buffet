/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

Info<< "Create mesh for time = "
    << runTime.timeName()
    << ", region "
    << name() << endl;

// Check existence of dynamicMeshDict
IOdictionary dynamicMeshDict
(
    IOobject
    (
        "dynamicMeshDict",
        runTime.constant(),
        (name() == fvMesh::defaultRegion ? "" : name()),
        runTime,
        IOobject::READ_IF_PRESENT,
        IOobject::NO_WRITE,
        false
    ),
    dictionary()
);

if (!dynamicMeshDict.headerOk())
{
    Info << "Creating static mesh" << nl << endl;
    mesh_.set
    (
        new fvMesh
        (
            IOobject
            (
                name(),
                runTime.timeName(),
                runTime,
                IOobject::MUST_READ
            )
        )
    );
}
else
{
    Info << "Creating dynamic mesh" << nl << endl;
    mesh_.set
    (
        dynamicFvMesh::New
        (
            IOobject
            (
                name(),
                runTime.timeName(),
                runTime,
                IOobject::MUST_READ
            )
        ).ptr()
    );
}

fvMesh& mesh = mesh_();
