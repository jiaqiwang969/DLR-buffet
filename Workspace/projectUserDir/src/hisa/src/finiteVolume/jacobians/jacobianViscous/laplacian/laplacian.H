/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2019 Oliver Oxtoby

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    laplacian

Description
    Jacobian approximating viscous terms by considering only the Laplacian
    part of the viscous terms. Boundary terms included.

Authors
    Johan Heyns
    Oliver Oxtoby
    Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/

#ifndef laplacian_H
#define laplacian_H

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "jacobianViscous.H"
#include "jacobianMatrix.H"
#include "fvCFD.H"
#include "psiThermo.H"
#include "fvjMatrix.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                      Class laplacian Declaration
\*---------------------------------------------------------------------------*/

class laplacian
:
    public jacobianViscous
{

    protected:

        const fvMesh& mesh_;
        const volScalarField& rho_;
        const volVectorField& rhoU_;
        const volScalarField& rhoE_;
        const psiThermo& thermo_;
#if FOUNDATION >= 8
        const compressible::momentumTransportModel& turbulence_;
        const thermophysicalTransportModel& thermophysicalTransport_;
#else
        const compressible::turbulenceModel& turbulence_;
#endif

        // Viscous coefficients
        tmp< surfaceScalarField > muEff_;
        tmp< surfaceScalarField > alphaEff_;


        //- Private member functions

            void addFluxTerms(compressibleJacobianMatrix& jacobian);
            void addTemporalTerms(compressibleJacobianMatrix& jacobian);


    public:
        //- Runtime type information
        TypeName("laplacian");

        laplacian
        (
            const dictionary& dict,
            const fvMesh& mesh,
            const volScalarField& rho,
            const volVectorField& rhoU,
            const volScalarField& rhoE,
            const psiThermo& thermo,
#if FOUNDATION >= 8
            const compressible::momentumTransportModel& turbulence,
            const thermophysicalTransportModel& thermophysicalTransport
#else
            const compressible::turbulenceModel& turbulence
#endif
        );

        virtual void addViscousJacobian(compressibleJacobianMatrix& jacobian);

        virtual void boundaryJacobian
        (
            label patchi,
            tmp<scalarField>& dContFluxdp, tmp<vectorField>& dContFluxdU, tmp<scalarField>& dContFluxdT,
            tmp<vectorField>& dMomFluxdp, tmp<tensorField>& dMomFluxdU, tmp<vectorField>& dMomFluxdT,
            tmp<scalarField>& dEnergyFluxdp, tmp<vectorField>& dEnergyFluxdU, tmp<scalarField>& dEnergyFluxdT
        );
};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
