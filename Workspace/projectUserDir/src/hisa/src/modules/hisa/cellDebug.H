if (cellDebugging_)
{
    volScalarField ee = (rhoE-0.5*magSqr(rhoU)/rho)/rho;
    surfaceScalarField ef = fvc::interpolate(ee, phi, "reconstruct(T)");
    surfaceScalarField phie = phi*ef;
    surfaceVectorField Uf = Up_()/mesh.magSf();
    surfaceScalarField phiEk = phi*0.5*magSqr(Uf);
    tmp<surfaceVectorField> phiUSnGradMuU;
    tmp<surfaceVectorField> phiUTauMC;
    if (!inviscid_)
    {
        volScalarField muEff("muEff", turbulence_->muEff());
        phiUSnGradMuU = -fvc::interpolate(muEff)*fvc::snGrad(U)*mesh.magSf();
        phiUTauMC = -mesh.Sf() & fvc::interpolate(tauMC_());
    }

    if (debugCell_ > -1)
    {
        Pout << "Debug information at cell " << debugCell_ << endl;
        scalar rhoMagUSqr = magSqr(rhoU[debugCell_])/rho[debugCell_];
        Pout<< "rho:" << tab << rho[debugCell_] << nl
            << "rhoU:" << tab << rhoU[debugCell_] << nl
            << "rhoE:" << tab << rhoE[debugCell_] << nl
            << "U:" << tab << rhoU[debugCell_]/rho[debugCell_] << nl
            << "p:" << tab << thermo.p()[debugCell_] << nl
            << "0.5*rho|U|^2:" << tab << 0.5*rhoMagUSqr << nl
            << "rhoe:" << tab << rhoE[debugCell_]-0.5*rhoMagUSqr << nl
            << "T:" << tab << thermo.T()[debugCell_] << nl
            << "Volume:" << tab << mesh.V()[debugCell_] << nl
            << "deltaT:" << tab << 1.0/(rPseudoDeltaT[debugCell_]+SMALL) << endl;
        if (localTimestepping_)
        {
            Pout << "pseudoCo: " << tab << pseudoCoField_()[debugCell_] << endl;
        }
        if (mesh.foundObject<volScalarField>("k"))
        {
            Pout << "k:" << tab << mesh.lookupObject<volScalarField>("k")[debugCell_] << endl;
        }
        if (mesh.foundObject<volScalarField>("omega"))
        {
            Pout << "omega:" << tab << mesh.lookupObject<volScalarField>("omega")[debugCell_] << endl;
        }
        Pout << "Residuals:" << nl;
        Pout << rhoR[debugCell_] << " " << rhoUR[debugCell_] << " " << rhoER[debugCell_] << endl;
        Pout << "Neighbouring faces:" << endl;
        forAll(phi, faceI)
        {
            label own = 0;
            label otherCellI = -1;
            if (mesh.owner()[faceI] == debugCell_)
            {
                own = 1;
                otherCellI = mesh.neighbour()[faceI];
            }
            else if (mesh.neighbour()[faceI] == debugCell_)
            {
                own = -1;
                otherCellI = mesh.owner()[faceI];
            }
            if (own != 0)
            {
                Pout<< "face:" << tab << faceI << nl
                    << "\tSf:" << tab << mesh.Sf()[faceI]*own << nl
                    << "\tphi:" << tab << phi[faceI]*own << nl
                    << "\tphiUp:" << tab << phiUp[faceI]*own << nl
                    << "\tphiEp:" << tab << phiEp[faceI]*own << nl
                    << "\tphie:" << tab << phie[faceI]*own << nl
                    << "\tphiEk:" << tab << phiEk[faceI]*own << nl
                    << "\tUf:" << tab << Uf[faceI] << nl
                    << "\tFace ratio:" << tab << (own < 0 ? 1 : 0) + own*mesh.weights()[faceI] << endl;
                if (!inviscid_)
                {
                    Pout << "\tphiUSnGradMuU:" << tab << phiUSnGradMuU()[faceI]*own << endl;
                    Pout << "\tphiUtauMC:" << tab << phiUTauMC()[faceI]*own << endl;
                }
                scalar rhoMagUSqr = magSqr(rhoU[otherCellI])/rho[otherCellI];
                Pout<< " neighbouring cell:" << tab << otherCellI << nl
                    << "\trho:" << tab << rho[otherCellI] << nl
                    << "\trhoU:" << tab << rhoU[otherCellI] << nl
                    << "\trhoE:" << tab << rhoE[otherCellI] << nl
                    << "\tU:" << tab << rhoU[otherCellI]/rho[otherCellI] << nl
                    << "\tp:" << tab << thermo.p()[otherCellI] << nl
                    << "\t0.5*rho|U|^2:" << tab << 0.5*rhoMagUSqr << nl
                    << "\trhoe:" << tab << rhoE[otherCellI]-0.5*rhoMagUSqr << nl
                    << "\tT:" << tab << thermo.T()[otherCellI] << nl
                    << "\tVolume:" << tab << mesh.V()[otherCellI] << nl
                    << "\tdeltaT:" << tab << 1.0/(rPseudoDeltaT[otherCellI]+SMALL) << endl;
                if (localTimestepping_)
                {
                    Pout << "\tpseudoCo: " << tab << pseudoCoField_()[otherCellI] << endl;
                }
                if (mesh.foundObject<volScalarField>("k"))
                {
                    Pout << "\tk:" << tab << mesh.lookupObject<volScalarField>("k")[otherCellI] << endl;
                }
                if (mesh.foundObject<volScalarField>("omega"))
                {
                    Pout << "\tomega:" << tab << mesh.lookupObject<volScalarField>("omega")[otherCellI] << endl;
                }
            }
        }
        forAll(phi.boundaryField(), patchI)
        {
            forAll(phi.boundaryField()[patchI], bfaceI)
            {
                if (mesh.boundary()[patchI].faceCells()[bfaceI] == debugCell_)
                {
                    Pout<< "patch:" << tab << patchI << tab
                        << "bface:" << tab << bfaceI << nl
                        << "\tSf:" << tab << mesh.Sf().boundaryField()[patchI][bfaceI] << nl
                        << "\tphi:" << tab << phi.boundaryField()[patchI][bfaceI] << nl
                        << "\tphiUp:" << tab << phiUp.boundaryField()[patchI][bfaceI] << nl
                        << "\tphiEp:" << tab << phiEp.boundaryField()[patchI][bfaceI] << nl
                        << "\tU_n:" << tab <<
                        (
                            U[debugCell_] & mesh.Sf().boundaryField()[patchI][bfaceI]
                        )/mesh.magSf().boundaryField()[patchI][bfaceI] << endl;
                }
            }
        }
    }
}
