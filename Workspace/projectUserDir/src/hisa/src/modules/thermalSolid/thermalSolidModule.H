/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2021 Oliver Oxtoby

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::thermalSolidModule

Description
    Solid heat transfer solver

SourceFiles
    thermalSolidModule.C

SeeAlso
    chtMultiRegionFoam

Authors
    Johan Heyns
    Oliver Oxtoby
        Council for Scientific and Industrial Research, South Africa

\*---------------------------------------------------------------------------*/


#ifndef thermalSolidModule_H
#define thermalSolidModule_H

#include "solverModule.H"
#include "dynamicFvMesh.H"
#include "solutionControl.H"
#include "fvCFD.H"
#include "solidThermo.H"
#include "coordinateSystem.H"
#if FOUNDATION >= 9
#include "fvModels.H"
#include "fvConstraints.H"
#else
#include "fvOptions.H"
#endif


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                   Class thermalSolidModule Declaration
\*---------------------------------------------------------------------------*/

class thermalSolidModule
:
    public solverModule
{
    // Private data

        //- Reference to the time database
        const Time& time_;

        //- Input dictionary
        dictionary dict_;

        autoPtr<fvMesh> mesh_;

        autoPtr<coordinateSystem> coordinates_;
        autoPtr<solidThermo> thermo_;
        //radiation::radiationModel radiation;
        #if FOUNDATION >= 9
        autoPtr<fvModels> solidHeatSources_;
        autoPtr<fvConstraints> solidConstraints_;
        #else
        autoPtr<fv::options> solidHeatSources_;
        #endif
        autoPtr<volScalarField> betavSolid_;
        autoPtr<volSymmTensorField> aniAlpha_;
    
        bool moveMeshOuterCorrectors_;
        
        scalar maxDi_;

        autoPtr<solutionControl> solnControl_;

        bool steadyState_;

        bool firstOuterCorrector_;

    protected:
        
        scalar solidRegionDiffNo
        (
            const fvMesh& mesh,
            const Time& runTime,
            const volScalarField& Cprho,
            const volScalarField& kappa
        );

        void updateAniAlpha(const tmp<volVectorField>& tkappaByCp);

public:

    //- Runtime type information
    TypeName("thermalSolid");


    // Constructors

        //- Construct from components
        thermalSolidModule
        (
            const word& name,
            const Time&,
            const dictionary&
        );

    // Member Functions

        //- Should return the scaling factor desired
        virtual scalar timeStepScaling(const scalar& maxCoNum);

        //- Called before time loop. Typically create mesh and fields here.
        virtual void initialise();

        //- Called at the start of a time step
        virtual void beginTimeStep();

        //- Called for each outer ('pimple') iteration
        virtual void outerIteration();

        //- Should return the mesh created during initialise
        virtual fvMesh& mesh()
        {
            return mesh_();
        }

        //- Should return the solution control created during initialise
        virtual solutionControl& solnControl()
        {
            return solnControl_();
        }

        //- Returns whether analysis should be steady state - makes time steps
        // and outer iterations one and the same.
        virtual bool steadyState()
        {
            return steadyState_;
        }
};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //

