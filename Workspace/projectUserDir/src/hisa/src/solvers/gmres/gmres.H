/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) Hrvoje Jasak, Wikki Ltd

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    gmres

Description
    Solves linear system J dU = Res where J is approximate LHS Jacobian
    for compressible flow using optionally preconditioned GMRES
    as per Luo, Baum, Lohner, JCP 146 664-690 (1998).

Authors
    Oliver Oxtoby
    Johan Heyns
        Council for Scientific and Industrial Research, South Africa

    Based on gmresSolver class in foam-extend project by Hrvoje Jasak, Wikki
    Ltd.

\*---------------------------------------------------------------------------*/

#ifndef gmres_H
#define gmres_H

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "fvCFD.H"
#include "jacobianMatrix.H"
#include "residualIO.H"
#include "preconditioner.H"
#include "solver.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                  Class gmresSolver Declaration
\*---------------------------------------------------------------------------*/

template <int nScalar, int nVector>
class gmres
:
    public solver<nScalar,nVector>
{
    protected:

        inline void givensRotation(const scalar& h, const scalar& beta, scalar& c, scalar& s) const;

    public:
        //- Runtime type information
        TypeName("GMRES");

        gmres
        (
            const dictionary& dict,
            const jacobianMatrix<nScalar,nVector>& jacobian,
            const preconditioner<nScalar,nVector>* preconditioner,
            residualIO& defaultTol // Default residual tolerance and ordering of residual I/O
        );

        // Main solve functions:

        // Solve J dU = Res (J is LHS Jacobian):

        //- Returns number of iterations
        virtual label solve
        (
            PtrList<volScalarField>& dsW, PtrList<volVectorField>& dvW,  //Initial/returned solution variables
            const PtrList<volScalarField>& sR, const PtrList<volVectorField>& vR,  //Residuals
            autoPtr< residualIO >& pInitRes
        ) const;


};

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "gmresTemplates.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //

