/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2016 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::reconstructionScheme

Group
    grpFvReconstructionSchemes

Description
    Abstract base class for limited surface interpolation schemes.

SourceFiles
    reconstructionScheme.C

\*---------------------------------------------------------------------------*/

#ifndef reconstructionScheme_H
#define reconstructionScheme_H

#include "surfaceInterpolationScheme.H"
#include "fvMesh.H"


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                 Class reconstructionScheme Declaration
\*---------------------------------------------------------------------------*/

template<class Type>
class reconstructionScheme
:
    public tmp<reconstructionScheme<Type>>::refCount
{
    // Private Member Functions

        //- Disallow copy construct
        reconstructionScheme
        (
            const reconstructionScheme&
        );

        //- Disallow default bitwise assignment
        void operator=(const reconstructionScheme&);


protected:

    // Protected data
    const fvMesh& mesh_;

public:

    //- Runtime type information
    TypeName("reconstructionScheme");


    // Declare run-time constructor selection tables

        declareRunTimeSelectionTable
        (
            tmp,
            reconstructionScheme,
            Mesh,
            (
                const fvMesh& mesh,
                Istream& schemeData
            ),
            (mesh, schemeData)
        );


    // Constructors

        //- Construct from mesh
        reconstructionScheme
        (
            const fvMesh& mesh
        )
        :
            mesh_(mesh)
        {}


        //- Construct from mesh and Istream.
        reconstructionScheme
        (
            const fvMesh& mesh,
            Istream& is
        )
        :
            mesh_(mesh)
        {}


    // Selectors

        //- Return new tmp reconstruction scheme
        static tmp<reconstructionScheme<Type>> New
        (
            const fvMesh& mesh,
            Istream& schemeData
        );


    //- Destructor
    virtual ~reconstructionScheme();


    // Member Functions

        //- Return the interpolation weighting factors
        virtual void limiter
        (
            const GeometricField<Type, fvPatchField, volMesh>& phi,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tLimiterField_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tLimiterField_R
        ) const = 0;

        //- Return the interpolation weighting factors for the given field,
        //  by limiting the given weights with the given limiter
        void weights
        (
            const GeometricField<Type, fvPatchField, volMesh>& phi,
            const surfaceScalarField& CDweights,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& weights_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& weights_R
        ) const;

        //- Return the interpolation weighting factors for the given field
        virtual void weights
        (
            const GeometricField<Type, fvPatchField, volMesh>& phi,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& weights_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& weights_R
        ) const;

        static void reconstruct
        (
            const GeometricField<Type, fvPatchField, volMesh>& vf,
            const tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tlambdas_L,
            const tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tlambdas_R,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tsf_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tsf_R
        );

        virtual void reconstruct
        (
            const GeometricField<Type, fvPatchField, volMesh>& vf,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tsf_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tsf_R
        ) const;

        virtual void reconstruct
        (
            tmp<GeometricField<Type, fvPatchField, volMesh>>& vf,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tsf_L,
            tmp<GeometricField<Type, fvsPatchField, surfaceMesh>>& tsf_R
        ) const;

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Add the patch constructor functions to the hash tables

#define makeReconstructionTypeScheme(SS, Type)                    \
                                                                               \
defineNamedTemplateTypeNameAndDebug(SS<Type>, 0);                              \
                                                                               \
reconstructionScheme<Type>::addMeshConstructorToTable<SS<Type>>   \
    add##SS##Type##MeshConstructorToReconstructTable_;

#define makeReconstructionScheme(SS)                              \
                                                                               \
makeReconstructionTypeScheme(SS, scalar)                          \
makeReconstructionTypeScheme(SS, vector)                          \
makeReconstructionTypeScheme(SS, sphericalTensor)                 \
makeReconstructionTypeScheme(SS, symmTensor)                      \
makeReconstructionTypeScheme(SS, tensor)


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
    #include "reconstructionScheme.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
