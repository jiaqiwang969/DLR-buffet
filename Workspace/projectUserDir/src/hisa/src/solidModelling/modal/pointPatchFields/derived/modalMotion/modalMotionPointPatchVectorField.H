/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2016 Ridhwaan Suliman - CSIR, South Africa
    Copyright (C) 2014-2016 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2014-2016 Johan Heyns - CSIR, South Africa
    Copyright (C) 2011-2012 OpenFOAM Foundation

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::modalMotionPointPatchVectorField

Description
    Boundary condition to be used with modalSolver function object.
    Example of boundary condition specification:
    \verbatim
    type        modalMotion;
    modalFunctionObject modalSolver1;
    modeShapes  5 ( ... ... ... ... ... );
    value       uniform (0 0 0);
    \endverbatim

    Note:
     - modeShapes is a list of point vector fields, linear followed
       by quadratic, multiplied by the following expansion of the
       modal variables in the order given:
       q1, q2, 0.5*q1^2, q1q2, 0.5*q2^2 (for two variables)
       q1, q2, q3, 0.5*q1^2, q1q2, q1q3, 0.5*q2^2, q2q3, 0.5*q3^2
       etc.

SourceFiles
    modalMotionPointPatchVectorField.C

Authors
    Ridhwaan Suliman
    Oliver Oxtoby
    Johan Heyns

\*---------------------------------------------------------------------------*/

#ifndef modalMotionPointPatchVectorField_H
#define modalMotionPointPatchVectorField_H

#include "fixedValuePointPatchField.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
        Class modalMotionPointPatchVectorField Declaration
\*---------------------------------------------------------------------------*/

class modalMotionPointPatchVectorField
:
    public fixedValuePointPatchField<vector>
{
    // Private data

        //- Initial positions of points on the patch
        pointField initialPoints_;

        //- Name of the modal function object which this boundary is hooked to
        word modalFunctionObjectName_;

        //- Mode shapes for each point on patch
        List<pointField> modeShapes_;

        //- Number of *linear* modes
        label nModes_;

public:

    //- Runtime type information
    TypeName("modalMotion");


    // Constructors


        //- Construct from patch and internal field
        modalMotionPointPatchVectorField
        (
            const pointPatch&,
            const DimensionedField<vector, pointMesh>&
        );


        //- Construct from patch, internal field and dictionary
        modalMotionPointPatchVectorField
        (
            const pointPatch&,
            const DimensionedField<vector, pointMesh>&,
            const dictionary&
        );

        //- Construct by mapping given patchField<vector> onto a new patch
        modalMotionPointPatchVectorField
        (
            const modalMotionPointPatchVectorField&,
            const pointPatch&,
            const DimensionedField<vector, pointMesh>&,
            const pointPatchFieldMapper&
        );

#if FOUNDATION >= 9
#else
        //- Construct and return a clone
        virtual autoPtr<pointPatchField<vector> > clone() const override
        {
            return autoPtr<pointPatchField<vector> >
            (
                new modalMotionPointPatchVectorField
                (
                    *this
                )
            );
        }
#endif

        //- Construct as copy setting internal field reference
        modalMotionPointPatchVectorField
        (
            const modalMotionPointPatchVectorField&,
            const DimensionedField<vector, pointMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual autoPtr<pointPatchField<vector> > clone
        (
            const DimensionedField<vector, pointMesh>& iF
        ) const
        {
            return autoPtr<pointPatchField<vector> >
            (
                new modalMotionPointPatchVectorField
                (
                    *this,
                    iF
                )
            );
        }


    // Member functions

        // Mapping functions

            //- Map (and resize as needed) from self given a mapping object
            virtual void autoMap
            (
                const pointPatchFieldMapper&
            );

            //- Reverse map the given pointPatchField onto this pointPatchField
            virtual void rmap
            (
                const pointPatchField<vector>&,
                const labelList&
            );

        // Evaluation functions

            //- Update the coefficients associated with the patch field
            virtual void updateCoeffs();

        virtual int getNumLinearModes() const
        {
            return nModes_;
        }

        virtual const List<vectorField>& getModeShapes() const;

        //- Write
        virtual void write(Ostream&) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
