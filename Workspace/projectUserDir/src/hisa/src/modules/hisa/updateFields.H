/*---------------------------------------------------------------------------*\

    HiSA: High Speed Aerodynamic solver

    Copyright (C) 2014-2018 Johan Heyns - CSIR, South Africa
    Copyright (C) 2014-2018 Oliver Oxtoby - CSIR, South Africa
    Copyright (C) 2020-2021 Oliver Oxtoby

-------------------------------------------------------------------------------
License
    This file is part of HiSA.

    HiSA is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HiSA is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with HiSA.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

    // Optional failsafe to avoid -ve rho. Avoid dividing by very small quantity
    const dictionary& dict = mesh.solutionDict().subDict("pseudoTime");
    dimensionedScalar rhoMin
    (
        "rhoMin", 
        dimDensity, 
        dict.lookupOrDefault<scalar>("rhoMin", -GREAT)
    );
    bound(rho, rhoMin);

    // Compute internal fields

    U.ref() = rhoU.internalField()/rho.internalField();

    e.ref() = rhoE.internalField()/rho.internalField()
              - 0.5*magSqr(U.internalField()) + eZero_->internalField();

    // Temperature bound
    dimensionedScalar TMin
    (
        "TMin", 
        dimTemperature, 
        dict.lookupOrDefault<scalar>("TMin", ROOTSMALL)
    );
    dimensionedScalar TMax
    (
        "TMax", 
        dimTemperature, 
        dict.lookupOrDefault<scalar>("TMax", GREAT)
    );
    
    // Bound energy
    volScalarField TBound
    (
        IOobject("TBound", runTime.timeName(), mesh), 
        mesh,
        TMin
    );
    volScalarField eBound = thermo.he(thermo.p(), TBound);

    if (max(neg(e-eBound)).value() > 0.5)
    {
        e = max(e, eBound);
        bounded_ = true;

         Info<< "Bounding " << e.name()
             << " to TMin: " << TMin.value()
             << endl;
    }

    // Only do max bound if it was specified
    if (TMax.value() < GREAT)
    {
        TBound == TMax;
        eBound == thermo.he(thermo.p(), TBound);
        if (max(pos(e-eBound)).value() > 0.5)
        {
            e = min(e, eBound);
            Info<< "Bounding " << e.name()
                << " to TMax: " << TMax.value()
                << endl;
        }
    }

    // Calc T and psi from e
    thermo.correct();

    p.ref() = rho.internalField()/psi.internalField();

    // Recalc rhoU and rhoE in case rho or e were bounded
    rhoU.ref() = rho.internalField()*U.internalField();
    rhoE.ref() = 
        rho.internalField()*
        (
            e.internalField() - eZero_() + 0.5*magSqr(U.internalField())
        );

    // Correct boundary fields
    p.correctBoundaryConditions();
    U.correctBoundaryConditions();
    T.correctBoundaryConditions();

    T.boundaryFieldRef() == max(T.boundaryField(), TMin.value());
    if (TMax.value() < GREAT)
    {
        T.boundaryFieldRef() == max(T.boundaryField(), TMax.value());
    }

    e.boundaryFieldRef() == thermo.he(p, T)->boundaryField();

    thermo.correct();                       // NOTE: Correct psi boundaryField

    tmp<volScalarField> trho = thermo.rho();
    forAll(rho.boundaryField(), patchi)
    {
        // Substitute wall pressure with zero grad to avoid unphysical values
        if
        (
            isA<characteristicWallPressureFvPatchScalarField>
            (
                p.boundaryField()[patchi]
            )
        )
        {
            rho.boundaryFieldRef()[patchi] =
                trho().boundaryField()[patchi].patchInternalField();
        }
        else
        {
            rho.boundaryFieldRef()[patchi] = trho().boundaryField()[patchi];
        }
    }
    rhoU.boundaryFieldRef() = rho.boundaryField()*U.boundaryField();
    rhoE.boundaryFieldRef() =
        rho.boundaryField()*
        (
            e.boundaryField() 
          - eZero_->boundaryField() 
          + 0.5*magSqr(U.boundaryField())
        );
